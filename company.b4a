Build1=Default,b4a.example,HU2_ACCEPTALL
File1=arrow-right-solid.svg
File2=arrows-removebg-preview.png
File3=Branch.bal
File4=cyduck.jpg
File5=dashboard.png
File6=Device.bal
File7=icons8-arrow-48.png
File8=Layout.bal
File9=stock.png
FileGroup1=Default Group
FileGroup2=Default Group
FileGroup3=Default Group
FileGroup4=Default Group
FileGroup5=Default Group
FileGroup6=Default Group
FileGroup7=Default Group
FileGroup8=Default Group
FileGroup9=Default Group
Group=Default Group
Library1=core
Library2=json
Library3=okhttp
Library4=okhttputils2
Library5=randomaccessfile
Library6=reflection
Library7=stringutils
Library8=xui
Library9=phone
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: https://www.b4x.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="21" android:targetSdkVersion="34"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~CreateResourceFromFile(Macro, Themes.LightTheme)~\n~'End of default text.~\n~
Module1=barGraph
Module2=Branch
Module3=CheckBargraph
Module4=Device
Module5=Starter
NumberOfFiles=9
NumberOfLibraries=9
NumberOfModules=5
Version=13.1
@EndOfDesignText@
#Region  Project Attributes 
	#ApplicationLabel: B4A Example
	#VersionCode: 1
	#VersionName: 1.1
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: unspecified
	#CanInstallToExternalStorage: False
#End Region

#Region  Activity Attributes 
	#FullScreen: True
	#IncludeTitle: False
#End Region

Sub Process_Globals
	'These global variables will be declared once when the application starts.
	'These variables can be accessed from all modules.
	Private xui As XUI
	Public company As String
	
End Sub

Sub Globals
	'These global variables will be redeclared each time the activity is created.
	Private ScrollView1 As ScrollView
	Dim PHPURL As String = "https://192.168.8.117/Company/company.php?action=get_company_list&page=1"
	Dim TableDetails As List
	'Private navigate As Button
	Private Button1 As Button
	Private navigate As Label
	Dim primaryFontSize As Int = 1.4%y
	Dim secondaryFontSize As Int = 1%y
	Private Panel1 As Panel
	Private Label1 As Label
	Private Panel2 As Panel
	Dim barGraph As barGraph
	Dim barGraph1 As barGraph
	Dim purchasePanel As Panel
	Dim barPanel As Panel
	Dim activityPanel As Panel
	Dim saleNxtBtn As Button
	Dim saleBackBtn As Button
	Dim purchNxtBtn As Button
	Dim purchBackBtn As Button
	Public legend() As String = Array As String("Sales1", "Sales2", "Sales3")
	Dim height As Int = 0

	
End Sub


Sub Activity_Create(FirstTime As Boolean)
	Activity.LoadLayout("Layout")
	Panel1.Color = Colors.Black
	Label1.Text = Label1.Text.ToUpperCase
	Label1.Typeface = Typeface.MONOSPACE
	ScrollView1.Panel.Color = Colors.ARGB(255, 241, 241, 241)
	Dim gradient As GradientDrawable
	gradient.Initialize("RIGHT_LEFT", Array As Int(Colors.RGB(225, 218, 218), Colors.RGB(189, 202, 217)))

	ScrollView1.Background = gradient
	ScrollView1.Panel.Height = Activity.Height
	Dim gradient As GradientDrawable
	gradient.Initialize("RIGHT_LEFT", Array As Int(Colors.ARGB(255, 185, 46, 52), Colors.ARGB(255, 61, 12, 2)))

	Panel2.Background = gradient
	LoadCompanyData

	barPanel.Initialize("")
	
	
End Sub
Sub LoadCompanyData
	Try
		Dim Job1 As HttpJob
		Job1.Initialize("GetData", Me)
		Job1.Download(PHPURL)
		ProgressDialogShow("Loading Data...")
	Catch
		Log(LastException.Message)
	End Try
	
End Sub
Sub JobDone(job As HttpJob)
	ProgressDialogHide
	If job.Success = True Then
		Try
			Dim parser As JSONParser
			parser.Initialize(job.GetString)
			Select Case job.JobName
				Case "GetData"
				
					Dim scrollHeight As Int = 0
					Dim salesArray As List = parser.NextArray
					' Parse the root object
					' Get the list of branches
			
					If salesArray.Size = 0 Then
						ToastMessageShow("No data received", True)
						Return
					End If
					Dim padding As Int = 10dip
					Dim count As Int = 0 ' Track panel count
	
					Dim rowNum As Int = 3
					Dim mainPanelWidth As Int = 0
					Dim panelHeight As Int = 150dip ' Adjust height as needed
					height = panelHeight - 70dip
					' Loop through fetched company data
					For Each record As Map In salesArray
						
							If count Mod 3 = 0 Then
								height = height + panelHeight 
							End If
							
							Dim col As Int = count Mod 3  ' Column position (0, 1, or 2)
							Dim row As Int = Floor(count / 3)
								
							Dim name As String = record.Get("company_name")
							Dim company_id As Int = record.Get("comId")
							Dim total_count As Int = record.Get("total_count")
							Dim total_pos As Int = record.Get("totalDevices")

							Dim dashPanel As Panel
							dashPanel.Initialize("")
							ScrollView1.Panel.AddView(dashPanel, 5dip, Panel2.Height, 200dip, 40dip)
							'AdjustFontSizeToHeight(dashLabel,2)
							
							Dim myImage As Bitmap
							myImage = LoadBitmap(File.DirAssets, "dashboard.png")
		
							Dim imgView As ImageView
							imgView.Initialize("")
							imgView.Gravity = Gravity.FILL
							imgView.Bitmap = myImage
							dashPanel.AddView(imgView, 0dip, 12.5dip, 15dip, dashPanel.Height - 25dip)
								
							Dim dashLabel As Label 
							dashLabel.Initialize("")
							dashLabel.Text = "Dashboard"
							dashLabel.TextColor = Colors.ARGB(50,156,0,0)
							dashLabel.Gravity = Gravity.CENTER_VERTICAL
							dashLabel.Typeface = Typeface.MONOSPACE
							dashPanel.AddView(dashLabel, imgView.Width+5dip, 0dip, dashPanel.Width, dashPanel.Height)
							AdjustFontSizeToHeight(dashLabel,2)
							
							Dim companyPanel As Panel
							companyPanel.Initialize("Panel")
							ScrollView1.Panel.AddView(companyPanel, 5dip,dashPanel.Height,  Activity.Width-10dip, height)
							
							
							mainPanelWidth = companyPanel.Width / rowNum
							Dim Panel As Panel
							Panel.Initialize("")
							companyPanel.AddView(Panel, col * (mainPanelWidth+5dip), Panel2.Height + (row * (panelHeight + 10dip)), mainPanelWidth-10dip, panelHeight)
								
							Dim PanelTitle As Panel
							PanelTitle.Initialize("Panel2")
							PanelTitle.Color = Colors.Black
							PanelTitle.Tag = name
							Panel.AddView(PanelTitle, 0, 0, Panel.Width, panelHeight-120dip)

							' Label for the company name
							Dim Label17 As Label
							Label17.Initialize("Label17")
							Label17.Text = name.ToUpperCase
							Label17.Tag = company_id
							Label17.TextSize = 18
							Label17.TextColor = Colors.White
							Label17.Gravity = Gravity.CENTER_VERTICAL
							Label17.Typeface = Typeface.MONOSPACE
							PanelTitle.AddView(Label17, 5dip, 0dip, PanelTitle.Width, PanelTitle.Height)
							AdjustFontSizeToHeight(Label17,2)
							
							Dim myImage As Bitmap
							myImage = LoadBitmap(File.DirAssets, "arrows-removebg-preview.png")
							If myImage.IsInitialized Then
								Dim resizedImage As Bitmap = myImage.Resize(DipToCurrent(4.5%x), myImage.Height * DipToCurrent(2%y) / myImage.Width, True)
								Dim imgView As ImageView
								imgView.Initialize("")
								imgView.Gravity = Gravity.FILL
								imgView.Bitmap = myImage
								PanelTitle.AddView(imgView, PanelTitle.Width - 5%x, 5dip, 5%x, PanelTitle.Height - 10dip)
							Else
								Log("Error loading image")
							End If
					
							Dim panelWidth As Int = Panel.Width /3
							Dim padding As Int = 10dip
							Dim labelheight As Int = panelHeight - PanelTitle.Height
							panelWidth = Panel.Width /2
					 		
							Dim totalStore As Label
							totalStore.Initialize("")
							totalStore.Text = total_count
							totalStore.TextColor = Colors.Black
							totalStore.TextSize = primaryFontSize
							totalStore.Gravity = Gravity.CENTER
							totalStore.Typeface = Typeface.SERIF
							Panel.AddView(totalStore,0,PanelTitle.Height,panelWidth,labelheight-30dip)
							AdjustFontSizeToHeight(totalStore,1.3)
							
							Dim totalStoreLabel As Label
							totalStoreLabel.Initialize("")
							totalStoreLabel.Text = " Total Store"
							totalStoreLabel.TextColor = Colors.Gray
							totalStoreLabel.TextSize = secondaryFontSize
							totalStoreLabel.Gravity = Gravity.CENTER
							totalStoreLabel.Typeface = Typeface.MONOSPACE
							totalStoreLabel.Text = totalStoreLabel.Text.ToUpperCase
							Panel.AddView(totalStoreLabel,0,totalStore.top+padding+20dip,panelWidth,labelheight)
					
							Dim totalPos As Label
							totalPos.Initialize("")
							totalPos.Text = total_pos
							totalPos.TextColor = Colors.Black
							totalPos.TextSize = primaryFontSize
							totalPos.Gravity = Gravity.CENTER
							totalPos.Typeface = Typeface.SERIF
							Panel.AddView(totalPos,panelWidth,PanelTitle.Height,panelWidth,labelheight-30dip)
							AdjustFontSizeToHeight(totalPos,1.3)
							
							Dim totalPosLabel As Label
							totalPosLabel.Initialize("")
							totalPosLabel.Text = " Total Pos"
							totalPosLabel.TextColor = Colors.Gray
							totalPosLabel.TextSize = secondaryFontSize
							totalPosLabel.Gravity = Gravity.CENTER
							totalPosLabel.Typeface = Typeface.MONOSPACE
							totalPosLabel.Text = totalPosLabel.Text.ToUpperCase
							Panel.AddView(totalPosLabel,panelWidth,totalPos.top+padding+20dip,panelWidth,labelheight)
							
						For i = 0 To salesArray.Size - 1
							
							Dim record As Map = salesArray.Get(i)
							Dim currentComId As String = record.Get("comId")
		    
						' Check if the current company's comId matches the target comId
							If currentComId = 1 Then

								' Check if the company has branches
								If record.ContainsKey("branches") Then
									Dim branches As List = record.Get("branches")
									Dim totalBranches As Int = branches.Size
			            
									' Initialize arrays for the current company's branches
									Dim branchNames(totalBranches) As String
									Dim branchSales1(totalBranches) As Int
									Dim branchSales2(totalBranches) As Int
									Dim branchSales3(totalBranches) As Int

									' Populate the arrays with branch details
									For j = 0 To totalBranches - 1
													Dim branchMap As Map = branches.Get(j)
													branchNames(j) = branchMap.GetDefault("branch_name","").As(String)
													branchSales1(j) = branchMap.GetDefault("sales1",0)
													branchSales2(j) = branchMap.GetDefault("sales2",0)
													branchSales3(j) = branchMap.GetDefault("sales3",0)
						
									Next
												
												Dim legend() As String = Array As String("Sales1","Sales2","Sales3")
												'barGraph1.Initialize(Activity, purchasePanel, branchSales1, branchSales2, branchSales3, branchNames,legend,19000,"Total Purchase of the Company",branchSales1,"Branch")
					
								Else
									Log($"Company: ${name} has no branches information."$)
								End If
							End If
						
						Next
				
						' Apply border styling
						Dim cd As ColorDrawable
						cd.Initialize2(Colors.White, 0dip, 0dip, Colors.Black)
						Panel.Background = cd
						count = count + 1
					Next
					' Initialize arrays dynamically based on data size
					Dim totalCompanies As Int = salesArray.Size
					Dim sales(totalCompanies) As Int
					Dim comId(totalCompanies) As Int
					Dim sales1(totalCompanies) As Int
					Dim sales2(totalCompanies) As Int
					Dim purchase(totalCompanies) As Int
					Dim purchase1(totalCompanies) As Int
					Dim purchase2(totalCompanies) As Int
					Dim companyName(totalCompanies) As String
					Dim max_value(totalCompanies) As Int 
					Dim maxSale As Int=0
					
					For i = 0 To totalCompanies - 1
						Dim record As Map = salesArray.Get(i)
						companyName(i) = record.GetDefault("company_name", "Unknown")
						comId(i) = record.GetDefault("comId", 0)
						sales(i) = record.GetDefault("sales_1", 0)
						sales1(i) = record.GetDefault("sales_2", 0)
						sales2(i) = record.GetDefault("sales_3", 0)
						purchase(i) = record.GetDefault("purchase_1", 0)
						purchase1(i) = record.GetDefault("purchase_2", 0)
						purchase2(i) = record.GetDefault("purchase_", 0)
						max_value(i) = record.GetDefault("max_value", 0)
						maxSale = Max(maxSale, max_value(i))
					Next	
			
					barPanel.RemoveAllViews
					barPanel.Invalidate ' Force redraw
				
					Activity.Initialize("")

					Dim legend() As String = Array As String("Sales1","Sales2","Sales3")
					'barGraph.changePage(Activity,"Branch")
					saleNxtBtn.Initialize("nxtBtn")
					saleBackBtn.Initialize("backbtn")
					
					Dim totalSalePanel As Panel
					totalSalePanel.Initialize("")
					ScrollView1.Panel.AddView(totalSalePanel,5dip,Panel2.Height+companyPanel.Height-28dip,Activity.Width,40dip)
					
					Dim myImage As Bitmap
					myImage = LoadBitmap(File.DirAssets, "stock.png")
		
					Dim imgView As ImageView
					imgView.Initialize("")
					imgView.Gravity = Gravity.FILL
					imgView.Bitmap = myImage
					totalSalePanel.AddView(imgView, 0dip, 12.5dip, 15dip, totalSalePanel.Height - 25dip)
					
					Dim totalSaleLabel As Label
					totalSaleLabel.Initialize("")
					totalSaleLabel.Text = "Total Sales"
					totalSaleLabel.TextColor = Colors.Black
					totalSaleLabel.Gravity = Gravity.CENTER_VERTICAL
					totalSaleLabel.Typeface = Typeface.MONOSPACE
					totalSalePanel.AddView(totalSaleLabel,imgView.Width+5dip,0dip,Activity.Width,40dip)
					AdjustFontSizeToHeight(totalSaleLabel,2)
						
					Dim shadowPanel As Panel
					shadowPanel.Initialize("")
					shadowPanel.Color = Colors.ARGB(50, 138, 138, 138)
					ScrollView1.Panel.AddView(shadowPanel, 25dip + 5dip, totalSaleLabel.Height + Panel2.Height + companyPanel.Height - 30dip + 5dip, Activity.Width - 50dip, 450dip)
					
					ScrollView1.Panel.AddView(barPanel,25dip,totalSaleLabel.Height+Panel2.Height+companyPanel.Height - 30dip,Activity.Width-50dip,450dip)
					barPanel.Color = Colors.White
					barGraph.Initialize(Activity,barPanel,sales,sales1,sales2,companyName,legend,maxSale,"Sales Per Company",comId,"Branch",saleNxtBtn,saleBackBtn)
					legend = Array As String("Purchase1","Purchase2","Purchase3")
					
					Dim totalPurchasePanel As Panel
					totalPurchasePanel.Initialize("")
					ScrollView1.Panel.AddView(totalPurchasePanel,5dip,barPanel.Height + Panel2.Height+companyPanel.Height+15dip,Activity.Width,40dip)
					
					Dim myImage As Bitmap
					myImage = LoadBitmap(File.DirAssets, "stock.png")
		
					Dim imgView As ImageView
					imgView.Initialize("")
					imgView.Gravity = Gravity.FILL
					imgView.Bitmap = myImage
					totalPurchasePanel.AddView(imgView, 0dip, 12.5dip, 15dip, totalPurchasePanel.Height - 25dip)
					
					Dim totalPurchaseLabel As Label
					totalPurchaseLabel.Initialize("")
					totalPurchaseLabel.Text = "Total Purchases"
					totalPurchaseLabel.TextColor =Colors.Black
					totalPurchaseLabel.Gravity = Gravity.CENTER_VERTICAL
					totalPurchaseLabel.Typeface = Typeface.MONOSPACE
					totalPurchasePanel.AddView(totalPurchaseLabel,imgView.Width + 5dip,0dip,Activity.Width,totalPurchasePanel.Height)
					AdjustFontSizeToHeight(totalPurchaseLabel,2)
					
					Dim shadowPurchPanel As Panel
					shadowPurchPanel.Initialize("")
					shadowPurchPanel.Color = Colors.ARGB(50, 138, 138, 138)
					ScrollView1.Panel.AddView(shadowPurchPanel, 25dip + 5dip,totalSaleLabel.Height+Panel2.Height+companyPanel.Height+barPanel.Height+totalPurchaseLabel.Height- 30dip+5dip, Activity.Width - 50dip, 450dip)
					
					purchasePanel.Initialize("")
					ScrollView1.Panel.AddView(purchasePanel,25dip, totalSaleLabel.Height+Panel2.Height+companyPanel.Height+barPanel.Height+totalPurchaseLabel.Height- 30dip,Activity.Width-50dip,450dip)
					purchNxtBtn.Initialize("nxtBtn")
					purchBackBtn.Initialize("backbtn")
					barGraph1.Initialize(Activity, purchasePanel, purchase, purchase1, purchase2, companyName,legend,maxSale,"Purchases Per Company",comId,"Branch",purchNxtBtn,purchBackBtn)
					Log($"maxSale:${maxSale}"$)
					purchasePanel.Color = Colors.White
					ScrollView1.Panel.Height = totalSaleLabel.Height+Panel2.Height+companyPanel.Height+barPanel.Height+totalPurchaseLabel.Height + purchasePanel.Height
				Case "UpdateData"
					ToastMessageShow("Data updated successfully", False)
					LoadCompanyData
				Case Else
					Log("Unknown job: " & job.JobName)
			End Select
		Catch
			ToastMessageShow("Error parsing sales data", True)
		End Try
	Else
		ToastMessageShow("Error: " & job.ErrorMessage, True)
	End If
	job.Release
End Sub
Sub GetMapValueOrDefault(m As Map, Key As String, DefaultValue As Object) As Object
	If m.ContainsKey(Key) Then
		Return m.Get(Key)
	Else
		Return DefaultValue
	End If
End Sub

Sub Activity_Resume

End Sub

Sub Activity_Pause (UserClosed As Boolean)
	
End Sub


Private Sub Label17_Click
	Dim clickedLabel As Label = Sender ' Get the clicked label
	Dim selectedCompany As String = clickedLabel.Tag ' Retrieve the company name
	' Store the company name in a global variable
	Starter.company_selected = selectedCompany

	' Pass the company name to the next activity
	StartActivity("Branch")
End Sub



Sub nxtBtn_Click
	Log("sad")
End Sub

Sub AdjustFontSizeToHeight(lbl As Label,fontNum As Float)
	Dim fontSize As Float = lbl.Height * fontNum / GetDeviceDensity ' 70% of height
	lbl.TextSize = fontSize
End Sub

Sub GetDeviceDensity As Float
	Dim pixelWidth As Int = 100%x ' Screen width in pixels
	Dim dipWidth As Int = 100dip  ' 100 DIPs in pixels
	Dim Dense As Float = pixelWidth / dipWidth
	Return Dense
End Sub
