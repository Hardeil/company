Build1=Default,b4a.example,HU2_ACCEPTALL
File1=arrow-right-solid.svg
File2=arrows-removebg-preview.png
File3=Branch.bal
File4=cyduck.jpg
File5=Device.bal
File6=icons8-arrow-48.png
File7=Layout.bal
FileGroup1=Default Group
FileGroup2=Default Group
FileGroup3=Default Group
FileGroup4=Default Group
FileGroup5=Default Group
FileGroup6=Default Group
FileGroup7=Default Group
Group=Default Group
Library1=core
Library2=json
Library3=okhttp
Library4=okhttputils2
Library5=xui
Library6=stringutils
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: https://www.b4x.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="21" android:targetSdkVersion="34"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~CreateResourceFromFile(Macro, Themes.LightTheme)~\n~'End of default text.~\n~
Module1=|relative|..\barGraph
Module2=Branch
Module3=Device
Module4=Starter
NumberOfFiles=7
NumberOfLibraries=6
NumberOfModules=4
Version=13.1
@EndOfDesignText@
#Region  Project Attributes 
	#ApplicationLabel: B4A Example
	#VersionCode: 1
	#VersionName: 1.1
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: unspecified
	#CanInstallToExternalStorage: False
#End Region

#Region  Activity Attributes 
	#FullScreen: True
	#IncludeTitle: False
#End Region

Sub Process_Globals
	'These global variables will be declared once when the application starts.
	'These variables can be accessed from all modules.
	Private xui As XUI	
	Public company As String 
	
End Sub

Sub Globals
	'These global variables will be redeclared each time the activity is created.
	Private ScrollView1 As ScrollView
	Dim PHPURL As String = "https://192.168.8.192/Company/fetch.php?action=get_company_list"
	Dim TableDetails As List
	'Private navigate As Button
	Private Button1 As Button
	Private navigate As Label
	Dim titleFontSize As Int = 4.5%y
	Dim primaryFontSize As Int = 1.6%y
	Dim secondaryFontSize As Int = 1%y
	Private Panel1 As Panel
	Private Label1 As Label
	Private Panel2 As Panel
	Dim barGraph As barGraph
	Dim barGraph1 As barGraph
	Dim barPanel As Panel
	Dim activityPanel As Panel
	Public legend() As String = Array As String("Sales1", "Sales2", "Sales3")
	
	Dim purchasePanel As Panel
End Sub


Sub Activity_Create(FirstTime As Boolean)
	Activity.LoadLayout("Layout")
	Label1.Text = Label1.Text.ToUpperCase
	Label1.Typeface = Typeface.MONOSPACE
	ScrollView1.Panel.Color = Colors.ARGB(255, 251, 251, 251)
	Dim gradient As GradientDrawable
	gradient.Initialize("RIGHT_LEFT", Array As Int(Colors.RGB(225, 218, 218), Colors.RGB(189, 202, 217)))

	ScrollView1.Background = gradient
	ScrollView1.Panel.Height = Activity.Height
	Dim gradient As GradientDrawable
	gradient.Initialize("RIGHT_LEFT", Array As Int(Colors.ARGB(255, 185, 46, 52), Colors.ARGB(255, 61, 12, 2)))

	Panel2.Background = gradient
	LoadCompanyData
	
	barPanel.Initialize("")
	Panel1.AddView(barPanel,25dip,Panel2.Height+20dip,Activity.Width-50dip,300dip)
	
	purchasePanel.Initialize("")
	Panel1.AddView(purchasePanel,25dip,barPanel.top+barPanel.Height+Panel2.Height+20dip,Activity.Width-50dip,300dip)
End Sub
Sub LoadCompanyData
	Dim Job1 As HttpJob
	Job1.Initialize("GetData", Me)
	Job1.Download(PHPURL)
	ProgressDialogShow("Loading Data...")
End Sub
Sub JobDone(job As HttpJob)
	ProgressDialogHide
	If job.Success = True Then
		Try
			Dim parser As JSONParser
			parser.Initialize(job.GetString)
			Select Case job.JobName
				Case "GetData"
					Dim salesArray As List = parser.NextArray
					Log(job.GetString)
					If salesArray.Size = 0 Then
						ToastMessageShow("No data received", True)
						Return
					End If
            
					' Initialize arrays dynamically based on data size
					Dim totalCompanies As Int = salesArray.Size
					Dim sales(totalCompanies) As Int
					Dim sales1(totalCompanies) As Int
					Dim sales2(totalCompanies) As Int
					Dim purchase(totalCompanies) As Int
					Dim purchase1(totalCompanies) As Int
					Dim purchase2(totalCompanies) As Int
					Dim product(totalCompanies) As String
					
					For i = 0 To totalCompanies - 1
						Dim record As Map = salesArray.Get(i)
						product(i) = record.GetDefault("company_name", "Unknown")
						sales(i) = record.GetDefault("sales_1", 0)
						sales1(i) = record.GetDefault("sales_2", 0)
						sales2(i) = record.GetDefault("sales_3", 0)
						purchase(i) = record.GetDefault("purchase_1", 0)
						purchase1(i) = record.GetDefault("purchase_2", 0)
						purchase2(i) = record.GetDefault("purchase_", 0)
					Next
            
					barPanel.RemoveAllViews
					barPanel.Invalidate ' Force redraw
	
					Dim legend() As String = Array As String("Sales1","Sales2","Sales3")
					barGraph.Initialize(Activity, barPanel, sales, sales1, sales2, product,legend,10000,"Total Sales of the Company")
					
					barGraph1.Initialize(Activity, purchasePanel, purchase, purchase1, purchase2, product,legend,10000,"Total Purchase of the Company")
                
				Case "UpdateData"
					' Handle data update
					ToastMessageShow("Data updated successfully", False)
					'CallSubDelayed(Me, "FetchData") ' Ensure data refresh
					LoadCompanyData
				Case Else
					Log("Unknown job: " & job.JobName)
			End Select
		Catch
			ToastMessageShow("Error parsing sales data", True)
		End Try
	Else
		ToastMessageShow("Error: " & job.ErrorMessage, True)
	End If
	job.Release
End Sub

Sub Activity_Resume

End Sub

Sub Activity_Pause (UserClosed As Boolean)
	
End Sub


Private Sub Label17_Click
	Dim clickedLabel As Label = Sender ' Get the clicked label
	Dim selectedCompany As String = clickedLabel.Tag ' Retrieve the company name
	' Store the company name in a global variable
	Starter.company_selected = selectedCompany

	' Pass the company name to the next activity
	StartActivity("Branch")
End Sub



