Build1=Default,b4a.example,HU2_ACCEPTALL
File1=arrow-right-solid.svg
File2=arrows-removebg-preview.png
File3=Branch.bal
File4=cyduck.jpg
File5=Device.bal
File6=icons8-arrow-48.png
File7=Layout.bal
FileGroup1=Default Group
FileGroup2=Default Group
FileGroup3=Default Group
FileGroup4=Default Group
FileGroup5=Default Group
FileGroup6=Default Group
FileGroup7=Default Group
Group=Default Group
Library1=core
Library2=json
Library3=okhttp
Library4=okhttputils2
Library5=xui
Library6=stringutils
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: https://www.b4x.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="21" android:targetSdkVersion="34"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~CreateResourceFromFile(Macro, Themes.LightTheme)~\n~'End of default text.~\n~
Module1=barGraph
Module2=Branch
Module3=CheckBargraph
Module4=Device
Module5=Starter
NumberOfFiles=7
NumberOfLibraries=6
NumberOfModules=5
Version=13.1
@EndOfDesignText@
#Region  Project Attributes 
	#ApplicationLabel: B4A Example
	#VersionCode: 1
	#VersionName: 1.1
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: unspecified
	#CanInstallToExternalStorage: False
#End Region

#Region  Activity Attributes 
	#FullScreen: True
	#IncludeTitle: False
#End Region

Sub Process_Globals
	'These global variables will be declared once when the application starts.
	'These variables can be accessed from all modules.
	Private xui As XUI
	Public company As String
	
End Sub

Sub Globals
	'These global variables will be redeclared each time the activity is created.
	Private ScrollView1 As ScrollView
	Dim PHPURL As String = "https://192.168.8.117/Company/fetch.php?action=get_company_list&page=1"
	Dim TableDetails As List
	'Private navigate As Button
	Private Button1 As Button
	Private navigate As Label
	Dim titleFontSize As Int = 4.5%y
	Dim primaryFontSize As Int = 1.6%y
	Dim secondaryFontSize As Int = 1%y
	Private Panel1 As Panel
	Private Label1 As Label
	Private Panel2 As Panel
	Dim barGraph As barGraph
	Dim barGraph1 As barGraph
	Dim barPanel As Panel
	Dim activityPanel As Panel
	Public legend() As String = Array As String("Sales1", "Sales2", "Sales3")
	
	Dim purchasePanel As Panel
	
End Sub


Sub Activity_Create(FirstTime As Boolean)
	Activity.LoadLayout("Layout")
	Label1.Text = Label1.Text.ToUpperCase
	Label1.Typeface = Typeface.MONOSPACE
	ScrollView1.Panel.Color = Colors.ARGB(255, 251, 251, 251)
	Dim gradient As GradientDrawable
	gradient.Initialize("RIGHT_LEFT", Array As Int(Colors.RGB(225, 218, 218), Colors.RGB(189, 202, 217)))

	ScrollView1.Background = gradient
	ScrollView1.Panel.Height = Activity.Height
	Dim gradient As GradientDrawable
	gradient.Initialize("RIGHT_LEFT", Array As Int(Colors.ARGB(255, 185, 46, 52), Colors.ARGB(255, 61, 12, 2)))

	Panel2.Background = gradient
	LoadCompanyData
	
	barPanel.Initialize("")
	Panel1.AddView(barPanel,25dip,Panel2.Height+20dip,Activity.Width-50dip,450dip)
	
	purchasePanel.Initialize("")
	Panel1.AddView(purchasePanel,25dip,barPanel.top+barPanel.Height+Panel2.Height+20dip - 100dip,Activity.Width-50dip,0dip)
End Sub
Sub LoadCompanyData
	Try
		Dim Job1 As HttpJob
		Job1.Initialize("GetData", Me)
		Job1.Download(PHPURL)
		ProgressDialogShow("Loading Data...")
	Catch
		Log(LastException.Message)
	End Try
End Sub
Sub JobDone(job As HttpJob)
	ProgressDialogHide
	If job.Success = True Then
		Try
			Dim parser As JSONParser
			parser.Initialize(job.GetString)
			Select Case job.JobName
				Case "GetData"
				
					Dim scrollHeight As Int = 0
					Dim salesArray As List = parser.NextArray
					' Parse the root object
					' Get the list of branches
			
					If salesArray.Size = 0 Then
						ToastMessageShow("No data received", True)
						Return
					End If
					
					' Grid Layout Settings
					Dim numColumns As Int = 2 ' Adjust based on preference
					Dim pnlWidth As Int = Activity.Width - 100dip
					Dim pnlHeight As Int = 280dip
					Dim padding As Int = 10dip
					Dim leftPosition As Int = 50dip
					Dim topPosition As Int = 77dip
					Dim count As Int = 0 ' Track panel count
					If Activity.Width >= 1340 Then
						pnlWidth = 490dip
						pnlHeight = 300dip
						padding = 10dip
						leftPosition = 10dip
					End If
					' Loop through fetched company data
					For Each record As Map In salesArray
						Dim name As String = record.Get("company_name")
						Dim company_id As Int = record.Get("comId")
						Dim total_count As Int = record.Get("total_count")
						Dim total_pos As Int = record.Get("totalDevices")
						
						' Create a new Panel dynamically
						Dim Panel As Panel
						Panel.Initialize("Panel")
						'ScrollView1.Panel.AddView(Panel, leftPosition, topPosition, pnlWidth, pnlHeight)
						Panel.Color = Colors.Black

						' Add a sub-panel (Panel2) for the title
						Dim Panel2 As Panel
						Panel2.Initialize("Panel2")
						Panel2.Color = Colors.Black
						Panel2.Tag = name
						Panel2.SendToBack
						'Panel.AddView(Panel2, 0, 0, Panel.Width, 6%y)

						' Label for the company name
						Dim Label17 As Label
						Label17.Initialize("Label17")
						Label17.Text = name
						Label17.Tag = company_id
						Label17.TextSize = 18
						Label17.TextColor = Colors.White
						Label17.Gravity = Gravity.CENTER_VERTICAL
						Label17.Typeface = Typeface.MONOSPACE
						'Panel2.AddView(Label17, 10dip, 0dip, Panel2.Width, Panel2.Height)
				
						Dim myImage As Bitmap
						myImage = LoadBitmap(File.DirAssets, "arrows-removebg-preview.png")
						If myImage.IsInitialized Then
							Dim resizedImage As Bitmap = myImage.Resize(DipToCurrent(4.5%x), myImage.Height * DipToCurrent(2%y) / myImage.Width, True)
							Dim imgView As ImageView
							imgView.Initialize("")
							imgView.Bitmap = resizedImage
							'Panel2.AddView(imgView, Panel2.Width - 8%x, 0dip, 10%x, Panel2.Height)
						Else
							Log("Error loading image")
						End If
				
						Dim panelWidth As Int = Panel.Width /3
						Dim padding As Int = 10dip
						Dim labelheight As Int = 35dip
				
				
						panelWidth = Panel.Width /2
				 
						Dim totalStore As Label
						totalStore.Initialize("")
						totalStore.Text = total_count
						totalStore.TextColor = Colors.Black
						totalStore.TextSize = primaryFontSize
						totalStore.Gravity = Gravity.CENTER
						totalStore.Typeface = Typeface.SERIF
						'Panel.AddView(totalStore,0,Label17.Height+padding+160dip,panelWidth,labelheight)
				
						Dim totalStoreLabel As Label
						totalStoreLabel.Initialize("")
						totalStoreLabel.Text = " Total Store"
						totalStoreLabel.TextColor = Colors.Gray
						totalStoreLabel.TextSize = secondaryFontSize
						totalStoreLabel.Gravity = Gravity.CENTER
						totalStoreLabel.Typeface = Typeface.MONOSPACE
						totalStoreLabel.Text = totalStoreLabel.Text.ToUpperCase
						'Panel.AddView(totalStoreLabel,0,totalStore.top+padding+20dip,panelWidth,labelheight)
				
						Dim totalPos As Label
						totalPos.Initialize("")
						totalPos.Text = total_pos
						totalPos.TextColor = Colors.Black
						totalPos.TextSize = primaryFontSize
						totalPos.Gravity = Gravity.CENTER
						totalPos.Typeface = Typeface.SERIF
						'Panel.AddView(totalPos,panelWidth,totalStoreLabel.Height+padding+160dip,panelWidth,labelheight)
				
						Dim totalPosLabel As Label
						totalPosLabel.Initialize("")
						totalPosLabel.Text = " Total Pos"
						totalPosLabel.TextColor = Colors.Gray
						totalPosLabel.TextSize = secondaryFontSize
						totalPosLabel.Gravity = Gravity.CENTER
						totalPosLabel.Typeface = Typeface.MONOSPACE
						totalPosLabel.Text = totalPosLabel.Text.ToUpperCase
		
					For i = 0 To salesArray.Size - 1
						
					Dim record As Map = salesArray.Get(i)
					Dim currentComId As String = record.Get("comId")
    
					' Check if the current company's comId matches the target comId
					If currentComId = 1 Then

						' Check if the company has branches
						If record.ContainsKey("branches") Then
						Dim branches As List = record.Get("branches")
						Dim totalBranches As Int = branches.Size
            
						' Initialize arrays for the current company's branches
						Dim branchNames(totalBranches) As String
						Dim branchSales1(totalBranches) As Int
						Dim branchSales2(totalBranches) As Int
						Dim branchSales3(totalBranches) As Int

						' Populate the arrays with branch details
						For j = 0 To totalBranches - 1
										Dim branchMap As Map = branches.Get(j)
										branchNames(j) = branchMap.GetDefault("branch_name","").As(String)
										branchSales1(j) = branchMap.GetDefault("sales1",0)
										branchSales2(j) = branchMap.GetDefault("sales2",0)
										branchSales3(j) = branchMap.GetDefault("sales3",0)
			
									Next
									
									Dim legend() As String = Array As String("Sales1","Sales2","Sales3")
									'barGraph1.Initialize(Activity, purchasePanel, branchSales1, branchSales2, branchSales3, branchNames,legend,19000,"Total Purchase of the Company")
		
					Else
					Log($"Company: ${name} has no branches information."$)
				End If
			End If
					Next


						

				
						If Activity.Width >= 1340 Then
							count = count + 1
							If count Mod numColumns = 0 Then
								' Move to the next row
								leftPosition = 10dip
								topPosition = topPosition + pnlHeight + padding
							Else
								' Move to the next column
								leftPosition = leftPosition + pnlWidth + padding
							End If
							scrollHeight = scrollHeight + 175dip
						Else
							topPosition = topPosition + pnlHeight + padding
							scrollHeight = scrollHeight + 300dip + padding
						End If
				
						' Apply border styling
						Dim cd As ColorDrawable
						cd.Initialize2(Colors.White, 0dip, 1dip, Colors.Black)
						Panel.Background = cd
					Next
					' Initialize arrays dynamically based on data size
					Dim totalCompanies As Int = salesArray.Size
					Dim sales(totalCompanies) As Int
					Dim comId(totalCompanies) As Int
					Dim sales1(totalCompanies) As Int
					Dim sales2(totalCompanies) As Int
					Dim purchase(totalCompanies) As Int
					Dim purchase1(totalCompanies) As Int
					Dim purchase2(totalCompanies) As Int
					Dim companyName(totalCompanies) As String
					Dim max_value(totalCompanies) As Int 
					Dim maxSale As Int=0
					
					For i = 0 To totalCompanies - 1
						Dim record As Map = salesArray.Get(i)
						companyName(i) = record.GetDefault("company_name", "Unknown")
						comId(i) = record.GetDefault("comId", 0)
						sales(i) = record.GetDefault("sales_1", 0)
						sales1(i) = record.GetDefault("sales_2", 0)
						sales2(i) = record.GetDefault("sales_3", 0)
						purchase(i) = record.GetDefault("purchase_1", 0)
						purchase1(i) = record.GetDefault("purchase_2", 0)
						purchase2(i) = record.GetDefault("purchase_", 0)
						max_value(i) = record.GetDefault("max_value", 0)
						maxSale = Max(maxSale, max_value(i))
					Next	
			
					barPanel.RemoveAllViews
					barPanel.Invalidate ' Force redraw
				


					Dim legend() As String = Array As String("Sales1","Sales2","Sales3")
					'barGraph.changePage(Activity,"Branch")
					barGraph.Initialize(Activity,barPanel,sales,sales1,sales2,companyName,legend,maxSale,"Total Sale of the Company",comId,"Branch")
					'legend = Array As String("Purchase1","Purchase2","Purchase3")
					'barGraph1.Initialize(Activity, purchasePanel, purchase, purchase1, purchase2, companyName,legend,maxSale,"Total Purchase of the Company")
				Case "UpdateData"
					ToastMessageShow("Data updated successfully", False)
					LoadCompanyData
				Case Else
					Log("Unknown job: " & job.JobName)
			End Select
		Catch
			ToastMessageShow("Error parsing sales data", True)
		End Try
	Else
		ToastMessageShow("Error: " & job.ErrorMessage, True)
	End If
	job.Release
End Sub
Sub GetMapValueOrDefault(m As Map, Key As String, DefaultValue As Object) As Object
	If m.ContainsKey(Key) Then
		Return m.Get(Key)
	Else
		Return DefaultValue
	End If
End Sub

Sub Activity_Resume

End Sub

Sub Activity_Pause (UserClosed As Boolean)
	
End Sub


Private Sub Label17_Click
	Dim clickedLabel As Label = Sender ' Get the clicked label
	Dim selectedCompany As String = clickedLabel.Tag ' Retrieve the company name
	' Store the company name in a global variable
	Starter.company_selected = selectedCompany

	' Pass the company name to the next activity
	StartActivity("Branch")
End Sub



